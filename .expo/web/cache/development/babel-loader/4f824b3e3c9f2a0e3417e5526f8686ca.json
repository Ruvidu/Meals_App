{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function CategoryGridTile(props) {\n  var TouchableCmp = TouchableOpacity;\n\n  if (Platform.OS === \"android\" && Platform.Version >= 22) {\n    TouchableCmp = TouchableNativeFeedback;\n  }\n\n  return _jsx(View, {\n    style: styles.gridItem,\n    children: _jsx(TouchableCmp, {\n      style: {\n        flex: 1\n      },\n      onPress: props.onSelect,\n      children: _jsx(View, {\n        style: _objectSpread(_objectSpread({}, styles.container), {\n          backgroundColor: props.color\n        }),\n        children: _jsx(Text, {\n          style: styles.title,\n          numberOfLines: 2,\n          children: props.title\n        })\n      })\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  gridItem: {\n    flex: 1,\n    margin: 15,\n    height: 150,\n    borderRadius: 10,\n    overflow: Platform.OS === \"android\" && Platform.Version >= 21 ? \"hidden\" : \"visible\",\n    elevation: 5\n  },\n  container: {\n    flex: 1,\n    borderRadius: 10,\n    shadowColor: \"black\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.26,\n    padding: 15,\n    justifyContent: \"flex-end\",\n    alignItems: \"flex-end\"\n  },\n  title: {\n    fontFamily: \"open-sans-bold\",\n    fontSize: 20,\n    textAlign: \"right\"\n  }\n});","map":{"version":3,"sources":["C:/ruvidu/r-native/meals-app/components/CategoryGridTile.js"],"names":["React","CategoryGridTile","props","TouchableCmp","TouchableOpacity","Platform","OS","Version","TouchableNativeFeedback","styles","gridItem","flex","onSelect","container","backgroundColor","color","title","StyleSheet","create","margin","height","borderRadius","overflow","elevation","shadowColor","shadowOffset","width","shadowOpacity","padding","justifyContent","alignItems","fontFamily","fontSize","textAlign"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;AAUA,eAAe,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC9C,MAAIC,YAAY,GAAGC,gBAAnB;;AACA,MAAIC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6BD,QAAQ,CAACE,OAAT,IAAoB,EAArD,EAAyD;AACvDJ,IAAAA,YAAY,GAAGK,uBAAf;AACD;;AACD,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,QAApB;AAAA,cACE,KAAC,YAAD;AAAc,MAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAArB;AAAkC,MAAA,OAAO,EAAET,KAAK,CAACU,QAAjD;AAAA,gBACE,KAAC,IAAD;AACE,QAAA,KAAK,kCAAOH,MAAM,CAACI,SAAd,GAA4B;AAAEC,UAAAA,eAAe,EAAEZ,KAAK,CAACa;AAAzB,SAA5B,CADP;AAAA,kBAGE,KAAC,IAAD;AAAM,UAAA,KAAK,EAAEN,MAAM,CAACO,KAApB;AAA2B,UAAA,aAAa,EAAE,CAA1C;AAAA,oBACGd,KAAK,CAACc;AADT;AAHF;AADF;AADF,IADF;AAaD;AACD,IAAMP,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE,CADE;AAERQ,IAAAA,MAAM,EAAE,EAFA;AAGRC,IAAAA,MAAM,EAAE,GAHA;AAIRC,IAAAA,YAAY,EAAE,EAJN;AAKRC,IAAAA,QAAQ,EACNjB,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6BD,QAAQ,CAACE,OAAT,IAAoB,EAAjD,GACI,QADJ,GAEI,SARE;AASRgB,IAAAA,SAAS,EAAE;AATH,GADqB;AAY/BV,EAAAA,SAAS,EAAE;AACTF,IAAAA,IAAI,EAAE,CADG;AAETU,IAAAA,YAAY,EAAE,EAFL;AAGTG,IAAAA,WAAW,EAAE,OAHJ;AAITC,IAAAA,YAAY,EAAE;AAAEC,MAAAA,KAAK,EAAE,CAAT;AAAYN,MAAAA,MAAM,EAAE;AAApB,KAJL;AAKTO,IAAAA,aAAa,EAAE,IALN;AAMTC,IAAAA,OAAO,EAAE,EANA;AAOTC,IAAAA,cAAc,EAAE,UAPP;AAQTC,IAAAA,UAAU,EAAE;AARH,GAZoB;AAsB/Bd,EAAAA,KAAK,EAAE;AACLe,IAAAA,UAAU,EAAE,gBADP;AAELC,IAAAA,QAAQ,EAAE,EAFL;AAGLC,IAAAA,SAAS,EAAE;AAHN;AAtBwB,CAAlB,CAAf","sourcesContent":["import React from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n  Platform,\r\n  TouchableNativeFeedback,\r\n} from \"react-native\";\r\n\r\nexport default function CategoryGridTile(props) {\r\n  let TouchableCmp = TouchableOpacity;\r\n  if (Platform.OS === \"android\" && Platform.Version >= 22) {\r\n    TouchableCmp = TouchableNativeFeedback;\r\n  }\r\n  return (\r\n    <View style={styles.gridItem}>\r\n      <TouchableCmp style={{ flex: 1 }} onPress={props.onSelect}>\r\n        <View\r\n          style={{ ...styles.container, ...{ backgroundColor: props.color } }}\r\n        >\r\n          <Text style={styles.title} numberOfLines={2}>\r\n            {props.title}\r\n          </Text>\r\n        </View>\r\n      </TouchableCmp>\r\n    </View>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  gridItem: {\r\n    flex: 1,\r\n    margin: 15,\r\n    height: 150,\r\n    borderRadius: 10,\r\n    overflow:\r\n      Platform.OS === \"android\" && Platform.Version >= 21\r\n        ? \"hidden\"\r\n        : \"visible\",\r\n    elevation: 5,\r\n  },\r\n  container: {\r\n    flex: 1,\r\n    borderRadius: 10,\r\n    shadowColor: \"black\",\r\n    shadowOffset: { width: 0, height: 2 },\r\n    shadowOpacity: 0.26,\r\n    padding: 15,\r\n    justifyContent: \"flex-end\",\r\n    alignItems: \"flex-end\",\r\n  },\r\n  title: {\r\n    fontFamily: \"open-sans-bold\",\r\n    fontSize: 20,\r\n    textAlign: \"right\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}